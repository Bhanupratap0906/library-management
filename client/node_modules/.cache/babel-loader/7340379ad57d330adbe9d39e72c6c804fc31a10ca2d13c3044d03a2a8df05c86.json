{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Desktop\\\\elevate program\\\\library\\\\client\\\\src\\\\components\\\\Validator.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Create a context for book validation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookValidationContext = /*#__PURE__*/createContext();\n\n// BookValidator component that provides validation logic\nexport const BookValidator = ({\n  children\n}) => {\n  // Reusable validation functions\n  const validateISBN = isbn => {\n    return /^(?:\\d{9}[\\dXx]|\\d{13})$/.test(isbn);\n  };\n  const validatePublishedDate = date => {\n    const publishedDate = new Date(date);\n    const today = new Date();\n    return !isNaN(publishedDate) && publishedDate <= today;\n  };\n  const validateAcademicCopies = (genre, copies) => {\n    return genre !== \"Academic\" || genre === \"Academic\" && copies >= 5;\n  };\n\n  // String sanitization utility\n  const sanitizeString = str => {\n    return str ? str.trim() : '';\n  };\n\n  // Date normalization utility\n  const normalizeDate = dateStr => {\n    if (!dateStr) return '';\n    const date = new Date(dateStr);\n    return !isNaN(date) ? date.toISOString().split('T')[0] : '';\n  };\n\n  // Main validation function\n  const validate = bookData => {\n    const errors = [];\n    const sanitizedData = {\n      ...bookData,\n      title: sanitizeString(bookData.title),\n      author: sanitizeString(bookData.author),\n      ISBN: sanitizeString(bookData.ISBN),\n      publishedDate: normalizeDate(bookData.publishedDate)\n    };\n\n    // Required fields validation\n    if (!sanitizedData.title) {\n      errors.push(/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"text-red-500\",\n        children: \"Title is required\"\n      }, \"title\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this));\n    }\n    if (!sanitizedData.author) {\n      errors.push(/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"text-red-500\",\n        children: \"Author is required\"\n      }, \"author\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this));\n    }\n    if (!sanitizedData.ISBN) {\n      errors.push(/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"text-red-500\",\n        children: \"ISBN is required\"\n      }, \"isbn-required\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this));\n    } else if (!validateISBN(sanitizedData.ISBN)) {\n      errors.push(/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"text-red-500\",\n        children: \"Invalid ISBN format (must be 10 or 13 digits)\"\n      }, \"isbn-format\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this));\n    }\n    if (!sanitizedData.publishedDate) {\n      errors.push(/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"text-red-500\",\n        children: \"Published date is required\"\n      }, \"date-required\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this));\n    } else if (!validatePublishedDate(sanitizedData.publishedDate)) {\n      errors.push(/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"text-red-500\",\n        children: \"Published date cannot be in the future\"\n      }, \"date-invalid\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this));\n    }\n\n    // Conditional validation for academic books\n    if (!validateAcademicCopies(sanitizedData.genre, sanitizedData.copiesAvailable)) {\n      errors.push(/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"text-red-500\",\n        children: \"Academic books must have at least 5 copies available\"\n      }, \"academic-copies\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this));\n    }\n    return {\n      isValid: errors.length === 0,\n      validatedData: sanitizedData,\n      errorElements: errors.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-disc pl-5\",\n        children: errors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 42\n      }, this) : null\n    };\n  };\n\n  // Context value\n  const contextValue = {\n    validate,\n    sanitizeString,\n    normalizeDate,\n    validateISBN,\n    validatePublishedDate,\n    validateAcademicCopies\n  };\n  return /*#__PURE__*/_jsxDEV(BookValidationContext.Provider, {\n    value: contextValue,\n    children: typeof children === 'function' ? children(contextValue) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for consuming the validation context\n_c = BookValidator;\nexport const useBookValidation = () => {\n  _s();\n  const context = useContext(BookValidationContext);\n  if (context === undefined) {\n    throw new Error('useBookValidation must be used within a BookValidator component');\n  }\n  return context;\n};\n\n// Standalone validation function for server-side usage\n_s(useBookValidation, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const validateBook = bookData => {\n  // Create a temporary instance to use the validation logic\n  const validator = {\n    validateISBN: isbn => /^(?:\\d{9}[\\dXx]|\\d{13})$/.test(isbn),\n    validatePublishedDate: date => {\n      const publishedDate = new Date(date);\n      const today = new Date();\n      return !isNaN(publishedDate) && publishedDate <= today;\n    },\n    validateAcademicCopies: (genre, copies) => {\n      return genre !== \"Academic\" || genre === \"Academic\" && copies >= 5;\n    },\n    sanitizeString: str => str ? str.trim() : '',\n    normalizeDate: dateStr => {\n      if (!dateStr) return '';\n      const date = new Date(dateStr);\n      return !isNaN(date) ? date.toISOString().split('T')[0] : '';\n    }\n  };\n  const errors = [];\n  const sanitizedData = {\n    ...bookData,\n    title: validator.sanitizeString(bookData.title),\n    author: validator.sanitizeString(bookData.author),\n    ISBN: validator.sanitizeString(bookData.ISBN),\n    publishedDate: validator.normalizeDate(bookData.publishedDate)\n  };\n\n  // Required fields\n  if (!sanitizedData.title) errors.push(\"Title is required\");\n  if (!sanitizedData.author) errors.push(\"Author is required\");\n  if (!sanitizedData.ISBN) {\n    errors.push(\"ISBN is required\");\n  } else if (!validator.validateISBN(sanitizedData.ISBN)) {\n    errors.push(\"Invalid ISBN format (must be 10 or 13 digits)\");\n  }\n  if (!sanitizedData.publishedDate) {\n    errors.push(\"Published date is required\");\n  } else if (!validator.validatePublishedDate(sanitizedData.publishedDate)) {\n    errors.push(\"Published date cannot be in the future\");\n  }\n  if (!validator.validateAcademicCopies(sanitizedData.genre, sanitizedData.copiesAvailable)) {\n    errors.push(\"Academic books must have at least 5 copies available\");\n  }\n  return {\n    isValid: errors.length === 0,\n    validatedData: sanitizedData,\n    errors\n  };\n};\nvar _c;\n$RefreshReg$(_c, \"BookValidator\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","BookValidationContext","BookValidator","children","validateISBN","isbn","test","validatePublishedDate","date","publishedDate","Date","today","isNaN","validateAcademicCopies","genre","copies","sanitizeString","str","trim","normalizeDate","dateStr","toISOString","split","validate","bookData","errors","sanitizedData","title","author","ISBN","push","className","fileName","_jsxFileName","lineNumber","columnNumber","copiesAvailable","isValid","length","validatedData","errorElements","contextValue","Provider","value","_c","useBookValidation","_s","context","undefined","Error","validateBook","validator","$RefreshReg$"],"sources":["C:/Users/karti/OneDrive/Desktop/elevate program/library/client/src/components/Validator.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\n// Create a context for book validation\r\nconst BookValidationContext = createContext();\r\n\r\n// BookValidator component that provides validation logic\r\nexport const BookValidator = ({ children }) => {\r\n  // Reusable validation functions\r\n  const validateISBN = (isbn) => {\r\n    return /^(?:\\d{9}[\\dXx]|\\d{13})$/.test(isbn);\r\n  };\r\n\r\n  const validatePublishedDate = (date) => {\r\n    const publishedDate = new Date(date);\r\n    const today = new Date();\r\n    return !isNaN(publishedDate) && publishedDate <= today;\r\n  };\r\n\r\n  const validateAcademicCopies = (genre, copies) => {\r\n    return genre !== \"Academic\" || (genre === \"Academic\" && copies >= 5);\r\n  };\r\n\r\n  // String sanitization utility\r\n  const sanitizeString = (str) => {\r\n    return str ? str.trim() : '';\r\n  };\r\n\r\n  // Date normalization utility\r\n  const normalizeDate = (dateStr) => {\r\n    if (!dateStr) return '';\r\n    const date = new Date(dateStr);\r\n    return !isNaN(date) ? date.toISOString().split('T')[0] : '';\r\n  };\r\n\r\n  // Main validation function\r\n  const validate = (bookData) => {\r\n    const errors = [];\r\n    const sanitizedData = {\r\n      ...bookData,\r\n      title: sanitizeString(bookData.title),\r\n      author: sanitizeString(bookData.author),\r\n      ISBN: sanitizeString(bookData.ISBN),\r\n      publishedDate: normalizeDate(bookData.publishedDate),\r\n    };\r\n    \r\n    // Required fields validation\r\n    if (!sanitizedData.title) {\r\n      errors.push(\r\n        <li key=\"title\" className=\"text-red-500\">\r\n          Title is required\r\n        </li>\r\n      );\r\n    }\r\n    \r\n    if (!sanitizedData.author) {\r\n      errors.push(\r\n        <li key=\"author\" className=\"text-red-500\">\r\n          Author is required\r\n        </li>\r\n      );\r\n    }\r\n    \r\n    if (!sanitizedData.ISBN) {\r\n      errors.push(\r\n        <li key=\"isbn-required\" className=\"text-red-500\">\r\n          ISBN is required\r\n        </li>\r\n      );\r\n    } else if (!validateISBN(sanitizedData.ISBN)) {\r\n      errors.push(\r\n        <li key=\"isbn-format\" className=\"text-red-500\">\r\n          Invalid ISBN format (must be 10 or 13 digits)\r\n        </li>\r\n      );\r\n    }\r\n    \r\n    if (!sanitizedData.publishedDate) {\r\n      errors.push(\r\n        <li key=\"date-required\" className=\"text-red-500\">\r\n          Published date is required\r\n        </li>\r\n      );\r\n    } else if (!validatePublishedDate(sanitizedData.publishedDate)) {\r\n      errors.push(\r\n        <li key=\"date-invalid\" className=\"text-red-500\">\r\n          Published date cannot be in the future\r\n        </li>\r\n      );\r\n    }\r\n    \r\n    // Conditional validation for academic books\r\n    if (!validateAcademicCopies(sanitizedData.genre, sanitizedData.copiesAvailable)) {\r\n      errors.push(\r\n        <li key=\"academic-copies\" className=\"text-red-500\">\r\n          Academic books must have at least 5 copies available\r\n        </li>\r\n      );\r\n    }\r\n    \r\n    return {\r\n      isValid: errors.length === 0,\r\n      validatedData: sanitizedData,\r\n      errorElements: errors.length > 0 ? <ul className=\"list-disc pl-5\">{errors}</ul> : null\r\n    };\r\n  };\r\n\r\n  // Context value\r\n  const contextValue = {\r\n    validate,\r\n    sanitizeString,\r\n    normalizeDate,\r\n    validateISBN,\r\n    validatePublishedDate,\r\n    validateAcademicCopies\r\n  };\r\n\r\n  return (\r\n    <BookValidationContext.Provider value={contextValue}>\r\n      {typeof children === 'function' ? children(contextValue) : children}\r\n    </BookValidationContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for consuming the validation context\r\nexport const useBookValidation = () => {\r\n  const context = useContext(BookValidationContext);\r\n  if (context === undefined) {\r\n    throw new Error('useBookValidation must be used within a BookValidator component');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Standalone validation function for server-side usage\r\nexport const validateBook = (bookData) => {\r\n  // Create a temporary instance to use the validation logic\r\n  const validator = {\r\n    validateISBN: (isbn) => /^(?:\\d{9}[\\dXx]|\\d{13})$/.test(isbn),\r\n    validatePublishedDate: (date) => {\r\n      const publishedDate = new Date(date);\r\n      const today = new Date();\r\n      return !isNaN(publishedDate) && publishedDate <= today;\r\n    },\r\n    validateAcademicCopies: (genre, copies) => {\r\n      return genre !== \"Academic\" || (genre === \"Academic\" && copies >= 5);\r\n    },\r\n    sanitizeString: (str) => str ? str.trim() : '',\r\n    normalizeDate: (dateStr) => {\r\n      if (!dateStr) return '';\r\n      const date = new Date(dateStr);\r\n      return !isNaN(date) ? date.toISOString().split('T')[0] : '';\r\n    }\r\n  };\r\n  \r\n  const errors = [];\r\n  const sanitizedData = {\r\n    ...bookData,\r\n    title: validator.sanitizeString(bookData.title),\r\n    author: validator.sanitizeString(bookData.author),\r\n    ISBN: validator.sanitizeString(bookData.ISBN),\r\n    publishedDate: validator.normalizeDate(bookData.publishedDate),\r\n  };\r\n  \r\n  // Required fields\r\n  if (!sanitizedData.title) errors.push(\"Title is required\");\r\n  if (!sanitizedData.author) errors.push(\"Author is required\");\r\n  \r\n  if (!sanitizedData.ISBN) {\r\n    errors.push(\"ISBN is required\");\r\n  } else if (!validator.validateISBN(sanitizedData.ISBN)) {\r\n    errors.push(\"Invalid ISBN format (must be 10 or 13 digits)\");\r\n  }\r\n  \r\n  if (!sanitizedData.publishedDate) {\r\n    errors.push(\"Published date is required\");\r\n  } else if (!validator.validatePublishedDate(sanitizedData.publishedDate)) {\r\n    errors.push(\"Published date cannot be in the future\");\r\n  }\r\n  \r\n  if (!validator.validateAcademicCopies(sanitizedData.genre, sanitizedData.copiesAvailable)) {\r\n    errors.push(\"Academic books must have at least 5 copies available\");\r\n  }\r\n  \r\n  return {\r\n    isValid: errors.length === 0,\r\n    validatedData: sanitizedData,\r\n    errors\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}